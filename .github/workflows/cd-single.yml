name: 🚀 Deploy Single Container (Jekyll Only)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ap-east-2
  ECR_REPOSITORY: jekyll-site
  K8S_NAMESPACE: my-blog-project
  DEPLOYMENT_NAME: my-blog-project-single

jobs:
  deploy:
    runs-on: self-hosted
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔐 Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: 🔑 Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: 🏗️ Build and push Docker image
      id: build-image
      env:
        ECR_REGISTRY: 728951503024.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "建置 Jekyll 網站映像..."
        docker build -f jekyll-site/Dockerfile.ultra-simple -t $ECR_REGISTRY/jekyll-site:$IMAGE_TAG jekyll-site/
        docker build -f jekyll-site/Dockerfile.ultra-simple -t $ECR_REGISTRY/jekyll-site:latest jekyll-site/
        
        echo "確保 ECR 倉庫存在..."
        aws ecr describe-repositories --repository-names jekyll-site --region ${{ env.AWS_REGION }} || \
        aws ecr create-repository --repository-name jekyll-site --region ${{ env.AWS_REGION }}
        
        echo "推送 Jekyll 映像到 ECR..."
        docker push $ECR_REGISTRY/jekyll-site:$IMAGE_TAG
        docker push $ECR_REGISTRY/jekyll-site:latest
        
        echo "✅ Jekyll 映像推送成功"
        echo "jekyll-image=$ECR_REGISTRY/jekyll-site:$IMAGE_TAG" >> $GITHUB_OUTPUT
        
    - name: ⚙️ Verify kubectl access
      run: |
        echo "檢查 kubectl 連接..."
        kubectl version --client
        kubectl cluster-info
        echo "✅ kubectl 連接正常"
        
    - name: 🧹 Force cleanup existing resources
      run: |
        echo "🧹 強制清理所有現有資源..."
        
        # 檢查命名空間是否存在
        if kubectl get namespace ${{ env.K8S_NAMESPACE }} >/dev/null 2>&1; then
          echo "🗑️  強制刪除命名空間: ${{ env.K8S_NAMESPACE }}"
          
          # 強制刪除所有資源
          kubectl delete all --all -n ${{ env.K8S_NAMESPACE }} --force --grace-period=0 || true
          kubectl delete deployment --all -n ${{ env.K8S_NAMESPACE }} --force --grace-period=0 || true
          kubectl delete service --all -n ${{ env.K8S_NAMESPACE }} --force --grace-period=0 || true
          kubectl delete configmap --all -n ${{ env.K8S_NAMESPACE }} --force --grace-period=0 || true
          kubectl delete secret --all -n ${{ env.K8S_NAMESPACE }} --force --grace-period=0 || true
          kubectl delete pvc --all -n ${{ env.K8S_NAMESPACE }} --force --grace-period=0 || true
          kubectl delete pv --all -n ${{ env.K8S_NAMESPACE }} --force --grace-period=0 || true
          
          # 強制刪除命名空間
          kubectl delete namespace ${{ env.K8S_NAMESPACE }} --force --grace-period=0 || true
          
          # 等待命名空間完全刪除
          echo "⏳ 等待命名空間完全刪除..."
          while kubectl get namespace ${{ env.K8S_NAMESPACE }} >/dev/null 2>&1; do
            echo "等待命名空間 ${{ env.K8S_NAMESPACE }} 完全刪除..."
            sleep 5
          done
          
          echo "✅ 命名空間 ${{ env.K8S_NAMESPACE }} 已完全刪除"
        else
          echo "ℹ️  命名空間 ${{ env.K8S_NAMESPACE }} 不存在，跳過清理"
        fi
        
        echo "🎉 強制清理完成！"
        
    - name: 🔐 Create ECR authentication secret
      run: |
        echo "創建 ECR 認證 secret..."
        
        # 確保命名空間存在
        kubectl apply -f k8s/namespace.yaml
        
        # 創建 ECR secret
        kubectl create secret docker-registry ecr-secret \
          --docker-server=728951503024.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com \
          --docker-username=AWS \
          --docker-password=$(aws ecr get-login-password --region ${{ env.AWS_REGION }}) \
          --docker-email=deploy@myblog.com \
          -n ${{ env.K8S_NAMESPACE }}
        
        echo "✅ ECR secret 創建成功"
        
    - name: 🎯 Update image tag in Kustomization
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "更新 Kustomization 中的映像標籤..."
        cd k8s
        
        # 使用 kustomize 更新映像標籤
        if command -v kustomize &> /dev/null; then
          kustomize edit set image 728951503024.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/jekyll-site:$IMAGE_TAG
        else
          # 如果沒有 kustomize，直接修改 deployment-single.yaml
          sed -i "s|image:.*jekyll-site.*|image: 728951503024.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/jekyll-site:$IMAGE_TAG|" deployment-single.yaml
        fi
        
        echo "✅ 映像標籤更新為: $IMAGE_TAG"
        
    - name: 📋 Deploy Kubernetes resources
      run: |
        echo "部署 Kubernetes 資源..."
        
        # 使用單容器配置部署
        if command -v kustomize &> /dev/null; then
          echo "使用 Kustomize 部署單容器配置..."
          kubectl apply -k k8s/kustomization-single.yaml
        else
          echo "使用 kubectl 部署單容器配置..."
          # 按順序應用配置文件
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/configmap.yaml
          kubectl apply -f k8s/deployment-single.yaml
          kubectl apply -f k8s/service-single.yaml
        fi
        
        echo "✅ 單容器資源部署完成"
        
    - name: ⏳ Wait for deployment
      run: |
        echo "等待部署完成..."
        
        # 先檢查 Pod 狀態
        echo "=== 檢查 Pod 狀態 ==="
        kubectl get pods -n ${{ env.K8S_NAMESPACE }} -l app=my-blog-project-single -o wide
        
        echo ""
        echo "=== 檢查 Pod 事件 ==="
        kubectl get events -n ${{ env.K8S_NAMESPACE }} --sort-by='.lastTimestamp' | grep -E "(my-blog-project-single|Failed|Error)" | tail -10
        
        echo ""
        echo "=== 檢查部署狀態 ==="
        kubectl describe deployment my-blog-project-single -n ${{ env.K8S_NAMESPACE }}
        
        # 等待部署完成，增加超時時間
        echo ""
        echo "開始等待部署完成..."
        kubectl rollout status deployment/my-blog-project-single -n ${{ env.K8S_NAMESPACE }} --timeout=600s
        echo "✅ 部署完成"
        
    - name: 📊 Verify deployment
      run: |
        echo "驗證部署狀態..."
        
        echo "=== Namespace ==="
        kubectl get namespace ${{ env.K8S_NAMESPACE }}
        
        echo ""
        echo "=== Pods ==="
        kubectl get pods -n ${{ env.K8S_NAMESPACE }} -l app=my-blog-project-single
        
        echo ""
        echo "=== Services ==="
        kubectl get services -n ${{ env.K8S_NAMESPACE }} -l app=my-blog-project-single
        
        echo ""
        echo "=== Deployments ==="
        kubectl get deployments -n ${{ env.K8S_NAMESPACE }} -l app=my-blog-project-single
        
        echo ""
        echo "=== Service Endpoints ==="
        kubectl get endpoints -n ${{ env.K8S_NAMESPACE }}
        
        echo ""
        echo "🎉 部署驗證完成！"
        echo ""
        echo "🌐 訪問方式："
        echo "   Jekyll 網站: http://[NODE-IP]:30081"
