name: CD - Deploy to AWS K8s

on:
  push:
    branches: [ main ]  # 只有 main 分支觸發部署
  workflow_dispatch:    # 允許手動觸發

env:
  AWS_REGION: ap-east-2
  ECR_REPOSITORY: my-blog-project
  K8S_NAMESPACE: my-blog-project
  DEPLOYMENT_NAME: my-blog-project

jobs:
  deploy:
    runs-on: self-hosted  # 使用 self-hosted runner
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔑 Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: 🐳 Get ECR login token
      id: ecr-login
      run: |
        echo "登入 AWS ECR..."
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin 728951503024.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
        echo "✅ ECR 登入成功"
        
    - name: 🏗️ Build and push Docker images
      id: build-images
      env:
        ECR_REGISTRY: 728951503024.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "建置 FastAPI 應用映像..."
        docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest .
        
        echo "建置 Jekyll 網站映像..."
        docker build -f jekyll-site/Dockerfile.prod -t $ECR_REGISTRY/jekyll-site:$IMAGE_TAG jekyll-site/
        docker build -f jekyll-site/Dockerfile.prod -t $ECR_REGISTRY/jekyll-site:latest jekyll-site/
        
        echo "推送所有映像到 ECR..."
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest
        docker push $ECR_REGISTRY/jekyll-site:$IMAGE_TAG
        docker push $ECR_REGISTRY/jekyll-site:latest
        
        echo "✅ 所有映像推送成功"
        echo "fastapi-image=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "jekyll-image=$ECR_REGISTRY/jekyll-site:$IMAGE_TAG" >> $GITHUB_OUTPUT
        
    - name: ⚙️ Verify kubectl access
      run: |
        echo "檢查 kubectl 連接..."
        kubectl version --client
        kubectl cluster-info
        echo "✅ kubectl 連接正常"
        
    - name: 🧹 Cleanup existing resources
      run: |
        echo "檢查並清理已存在的資源..."
        
        # 使用清理腳本
        if [ -f "scripts/cleanup.sh" ]; then
          echo "使用清理腳本..."
          ./scripts/cleanup.sh
        else
          echo "手動清理資源..."
          # 檢查並刪除命名空間（這會刪除其中的所有資源）
          if kubectl get namespace ${{ env.K8S_NAMESPACE }} >/dev/null 2>&1; then
            echo "刪除命名空間: ${{ env.K8S_NAMESPACE }}"
            kubectl delete namespace ${{ env.K8S_NAMESPACE }}
            # 等待命名空間完全刪除
            while kubectl get namespace ${{ env.K8S_NAMESPACE }} >/dev/null 2>&1; do
              echo "等待命名空間刪除..."
              sleep 5
            done
          fi
        fi
        
        echo "✅ 資源清理完成"
        
    - name: 🔐 Create ECR authentication secret
      run: |
        echo "創建 ECR 認證 secret..."
        
        # 確保命名空間存在
        kubectl apply -f k8s/namespace.yaml
        
        # 創建 ECR secret
        kubectl create secret docker-registry ecr-secret \
          --docker-server=728951503024.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com \
          --docker-username=AWS \
          --docker-password=$(aws ecr get-login-password --region ${{ env.AWS_REGION }}) \
          --docker-email=deploy@myblog.com \
          -n ${{ env.K8S_NAMESPACE }}
        
        echo "✅ ECR secret 創建成功"
        
    - name: 🎯 Update image tag in Kustomization
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "更新 Kustomization 中的映像標籤..."
        cd k8s
        
        # 使用 kustomize 更新映像標籤
        if command -v kustomize &> /dev/null; then
          kustomize edit set image 728951503024.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
        else
          # 如果沒有 kustomize，直接修改 deployment.yaml
          sed -i "s|image:.*|image: 728951503024.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG|" deployment.yaml
        fi
        
        echo "✅ 映像標籤更新為: $IMAGE_TAG"
        
    - name: 📋 Deploy Kubernetes resources
      run: |
        echo "部署 Kubernetes 資源..."
        
        # 使用多容器配置部署
        if command -v kustomize &> /dev/null; then
          echo "使用 Kustomize 部署多容器配置..."
          kubectl apply -k k8s/kustomization-multi.yaml
        else
          echo "使用 kubectl 部署多容器配置..."
          # 按順序應用配置文件
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/configmap.yaml
          kubectl apply -f k8s/deployment-multi.yaml
          kubectl apply -f k8s/service-multi.yaml
        fi
        
        echo "✅ 多容器資源部署完成"
        
    - name: ⏳ Wait for deployment
      run: |
        echo "等待部署完成..."
        kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} -n ${{ env.K8S_NAMESPACE }} --timeout=300s
        echo "✅ 部署完成"
        
    - name: 📊 Verify deployment
      run: |
        echo "驗證部署狀態..."
        
        echo "=== Namespace ==="
        kubectl get namespace ${{ env.K8S_NAMESPACE }}
        
        echo ""
        echo "=== Pods ==="
        kubectl get pods -n ${{ env.K8S_NAMESPACE }} -l app=${{ env.DEPLOYMENT_NAME }}
        
        echo ""
        echo "=== Services ==="
        kubectl get services -n ${{ env.K8S_NAMESPACE }} -l app=${{ env.DEPLOYMENT_NAME }}
        
        echo ""
        echo "=== Deployments ==="
        kubectl get deployments -n ${{ env.K8S_NAMESPACE }} -l app=${{ env.DEPLOYMENT_NAME }}
        
        echo ""
        echo "=== Service Endpoints ==="
        kubectl get endpoints -n ${{ env.K8S_NAMESPACE }}
        
        echo ""
        echo "🎉 部署驗證完成！"
