name: CD - Deploy to AWS K8s

on:
  push:
    branches: [ main ]  # 只有 main 分支觸發部署
  workflow_dispatch:    # 允許手動觸發

env:
  AWS_REGION: ap-east-2
  ECR_REPOSITORY: my-blog-project
  K8S_NAMESPACE: default
  DEPLOYMENT_NAME: my-blog-project

jobs:
  deploy:
    runs-on: self-hosted  # 使用 self-hosted runner
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Get ECR login token
      id: ecr-login
      run: |
        # 使用 AWS CLI 獲取 ECR 登入 token
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin 728951503024.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
        
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: 728951503024.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT
        
    - name: Check kubectl access
      run: |
        # 檢查 kubectl 是否可用（因為 runner 已經在集群內）
        kubectl version --client
        kubectl cluster-info
        kubectl get nodes
        
    - name: Create ECR authentication secret
      run: |
        # 創建或更新 ECR 認證 secret
        if kubectl get secret ecr-secret -n ${{ env.K8S_NAMESPACE }} &> /dev/null; then
          echo "Updating existing ECR secret..."
          kubectl delete secret ecr-secret -n ${{ env.K8S_NAMESPACE }}
        fi
        
        echo "Creating new ECR secret..."
        kubectl create secret docker-registry ecr-secret \
          --docker-server=728951503024.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com \
          --docker-username=AWS \
          --docker-password=$(aws ecr get-login-password --region ${{ env.AWS_REGION }}) \
          --docker-email=deploy@myblog.com \
          -n ${{ env.K8S_NAMESPACE }}
        
        echo "ECR secret created successfully"
        
    - name: Create or update Kubernetes resources
      run: |
        # 先清理已存在的資源，避免衝突
        echo "檢查並清理已存在的資源..."
        
        # 檢查並刪除已存在的 service
        if kubectl get service ${{ env.DEPLOYMENT_NAME }} -n ${{ env.K8S_NAMESPACE }} &> /dev/null; then
          echo "刪除已存在的 service: ${{ env.DEPLOYMENT_NAME }}"
          kubectl delete service ${{ env.DEPLOYMENT_NAME }} -n ${{ env.K8S_NAMESPACE }}
          # 等待 service 完全刪除
          sleep 5
        fi
        
        # 檢查並刪除已存在的 deployment
        if kubectl get deployment ${{ env.DEPLOYMENT_NAME }} -n ${{ env.K8S_NAMESPACE }} &> /dev/null; then
          echo "刪除已存在的 deployment: ${{ env.DEPLOYMENT_NAME }}"
          kubectl delete deployment ${{ env.DEPLOYMENT_NAME }} -n ${{ env.K8S_NAMESPACE }}
          # 等待 deployment 完全刪除
          sleep 10
        fi
        
        echo "創建新的 deployment..."
        
        # 創建 deployment
        kubectl create deployment ${{ env.DEPLOYMENT_NAME }} \
          --image=${{ steps.build-image.outputs.image }} \
          --port=8080 \
          -n ${{ env.K8S_NAMESPACE }}
          
        # 添加 imagePullSecrets 到 deployment
        kubectl patch deployment ${{ env.DEPLOYMENT_NAME }} \
          -p '{"spec":{"template":{"spec":{"imagePullSecrets":[{"name":"ecr-secret"}]}}}}' \
          -n ${{ env.K8S_NAMESPACE }}
          
        echo "創建新的 service..."
        
        # 創建 service
        kubectl expose deployment ${{ env.DEPLOYMENT_NAME }} \
          --port=80 \
          --target-port=8080 \
          --type=LoadBalancer \
          -n ${{ env.K8S_NAMESPACE }}
        
    - name: Deploy to Kubernetes
      run: |
        # 等待部署完成
        kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} \
          -n ${{ env.K8S_NAMESPACE }}
          
        # 驗證部署
        kubectl get pods -n ${{ env.K8S_NAMESPACE }}
        kubectl get services -n ${{ env.K8S_NAMESPACE }}
        
        # 顯示服務信息
        echo "=== Service Information ==="
        kubectl get service ${{ env.DEPLOYMENT_NAME }} -n ${{ env.K8S_NAMESPACE }} -o wide
        
        # 顯示 pod 詳細信息
        echo "=== Pod Details ==="
        kubectl describe pods -l app=${{ env.DEPLOYMENT_NAME }} -n ${{ env.K8S_NAMESPACE }}
        
        # 顯示部署狀態
        echo "=== Deployment Status ==="
        kubectl get deployment ${{ env.DEPLOYMENT_NAME }} -n ${{ env.K8S_NAMESPACE }} -o wide
        
        # 檢查應用是否可訪問
        echo "=== Application Health Check ==="
        kubectl get pods -l app=${{ env.DEPLOYMENT_NAME }} -n ${{ env.K8S_NAMESPACE }} -o wide
        echo "Pods are running successfully!"
